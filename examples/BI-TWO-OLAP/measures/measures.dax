Meta Produtividade Individual :=
	   8


Usuário Nome :=
	MID(USERNAME(), SEARCH("\\", USERNAME())	
, 1 
00)


Usuário Logado :=
	RIGHT([Usuário Nome];
         (LEN([Usuário Nome])-1))


Título - Seleção Cliente :=
	   IF(HASONEFILTER(dCliente[Sigla Cliente]);
     "CENÁRIO ➝ "&FILTERS(dCliente[Sigla Cliente]);
     "SELECIONE O CLIENTE")


Mês Corrente :=
	MONTH(TODAY())


Ano Corrente :=
	YEAR(TODAY())


Data e Horário Corrente :=
	 NOW()


Dia Corrente :=
	DAY(TODAY())


Aux Horas Apontadas no Mês :=
	CALCULATE(SUM(factRegistry[Horas Apontadas]);
               FILTER(dTempoRegistry, dTempoRegistry[Código Mês] == MONTH(TODAY()));
               FILTER(dTempoRegistry,  dTempoRegistry[Código Ano] == YEAR(TODAY())))


Soma Minutos :=
	FORMAT(SUM([Minutos]), "Standard")


Média Horas Apontadas :=
	FORMAT(AVERAGE([Horas Apontadas]), "Standard")


Soma Horas :=
	FORMAT(SUM([Horas Apontadas]), "Standard")


Média Minutos :=
	AVERAGE([Minutos])


Distinct Count IDUSUARIO :=
	FORMAT(DISTINCTCOUNT(factRegistry[IDUSUARIO]), "Standard")


Horas Potenciais :=
	FORMAT( factRegistry[Distinct Count IDUSUARIO] * [Horas Úteis Mês], "Standard")


Qtde Chamados Registry :=
	 DISTINCTCOUNT([IDCHAMADO])


Horas Apontadas Formatada :=
	FORMAT(SUM([Horas Apontadas]), "Standard")


Qtde Registry Formatada :=
	FORMAT(SUM([Qtde Registry]), "Standard")


Qtde Tarefa Projeto Serp :=
	DISTINCTCOUNT([IDTAREFASERP])


Qtde Projeto Serp :=
	DISTINCTCOUNT([IDPROJETOSERP])


Horas Apontadas no Mês :=
	FORMAT( CALCULATE([Aux Horas Apontadas no Mês], ALL(dTempoRegistry)), "Standard")


Aux Média Horas Apontadas no Mês :=
	CALCULATE(AVERAGE(factRegistry[Média Horas Apontadas por Registry]);
   FILTER(factRegistry, factRegistry[Média Horas Apontadas por Registry] > 0))


Média Horas Apontadas no Mês :=
	FORMAT( CALCULATE([Aux Média Horas Apontadas no Mês], ALL(dTempoRegistry)), "Standard")


Qtde Backlog Consequência :=
	   CALCULATE(COUNT(factBacklog[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))


Qtde A Vencer :=
	   CALCULATE(SUM(factBacklog[SLA a Vencer]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))  //1376 = Defeito Consequência


Qtde Backlog :=
	   CALCULATE(COUNT(factBacklog[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))  //1376 = Defeito Consequência


Qtde Sem SLA :=
	   CALCULATE(SUM(factBacklog[Sem SLA]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))  //1376 = Defeito Consequência


Qtde Vencidos :=
	   CALCULATE(SUM(factBacklog[SLA Vencido]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))  //1376 = Defeito Consequência


Count of SLA a Vencer :=
	COUNTA([SLA a Vencer])


Qtde Rejeites Backlog :=
	CALCULATE(COUNT(factBacklog[IDORIUNDOREJEITE]);
       FILTER(factBacklog, factBacklog[IDORIUNDOREJEITE] = 1))


Soma de IDORIUNDOREJEITE :=
	SUM([IDORIUNDOREJEITE])


Média Inputs - Diária :=
	   ROUND([Qtde Inputs aux]/[Dias Úteis Mês Apuração]	
, 1 
)


Média Inputs - Dias Úteis :=
	   ROUND([Qtde Inputs aux]/[Dias Úteis Mês Apuração]	
, 1 
)


Média Inputs - Mensal :=
	   ROUND([Qtde Inputs aux]/[Meses Contabilizados]	
, 1 
)


Qtde Inputs aux :=
	   CALCULATE(COUNT(factInput[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência")) 


Qtde Inputs Consequência :=
	   CALCULATE(COUNT(factInput[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))


Qtde Inputs :=
	   IF(ISBLANK([Qtde Inputs aux]);
   0;
   [Qtde Inputs aux])


Qtde Inputs Chegaram com SLA Perdido :=
	CALCULATE(SUM((factInput[SLA Venceu no Suporte])))


Qtde Rejeites Abertura :=
	CALCULATE(SUM(factInput[IDORIUNDOREJEITE]),  								 FILTER(factInput, factInput[IDORIUNDOREJEITE] = 1))


Qtde Negociações :=
	   COUNTROWS(factNegociado)


Média Entregas Dev :=
	   [Qtde Entregas]/factOutput[distinctcount_IDDTAPURACAO_dIFf_blank]


Última Entrega :=
	   CALCULATE(MAX(factOutput[Data e Horário IDDTRESOLUCAO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Média Entregas - Mensal :=
	   ROUND([Qtde Entregas]/[Meses Contabilizados], 0)


Produtividade DEV :=
	   [Qtde Entregas]/[Qtde Analistas]


Produtividade Testers :=
	   [Qtde Entregas]/[Qtde Testers]


IAD :=
	   IF([Qtde Inputs aux] > 0;
       CALCULATE(DIVIDE([Qtde Entregas], [Qtde Inputs aux], 0));
       [Qtde Entregas])


SLA :=
	   DIVIDE([Qtde Entregas No Prazo];
         ([Qtde Entregas No Prazo] + [Qtde Entregas Fora Prazo]))


Produtividade :=
	   [Qtde Entregas]/[Qtde Analistas]


Média Entregas - Diária :=
	   ROUND([Qtde Entregas]/[Dias Úteis Mês Apuração], 0)


Qtde Entregas :=
	   CALCULATE(COUNT(factOutput[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Qtde Dias Última Entrega :=
	CALCULATE(DATEDIFF(MAX(factOutput[Data e Horário IDDTRESOLUCAO]), TODAY(), DAY);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Qtde Analistas :=
	   CALCULATE(DISTINCTCOUNT(factOutput[IDUSUARIOPROPRIETARIO]);
             FILTER(dTipoChamado,dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Qtde Entregas No Prazo :=
	   CALCULATE(COUNTROWS(factOutput);
             FILTER(factOutput, factOutput[No Prazo]=1);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Qtde Entregas Fora Prazo :=
	   CALCULATE(COUNTROWS(factOutput);
             FILTER(factOutput, factOutput[Fora Prazo] = 1);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))


Qtde Entregas Consequência :=
	   CALCULATE(COUNT(factOutput[IDCHAMADO]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))


Qtde Testers :=
	   CALCULATE(DISTINCTCOUNT(factOutput[IDTESTER]);
             FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência")) // unsigned, null e \'\' como Não Informado


Produtividade Mês :=
	DIVIDE([Qtde Entregas], [Dias Úteis Mês Apuração])


distinctcount_IDDTAPURACAO_diff_blank :=
	calculate( distinctcount(factOutput[IDDTAPURACAO Manipulado]), factOutput[IDDTAPURACAO Manipulado] <> BLANK())// original', "// Dias Úteis Mês = CALCULATE(sum('dCalendário'[Fim de Semana]))", '


Qtde Rejeites Entregues :=
	CALCULATE(SUM(factOutput[IDORIUNDOREJEITE]),  								 FILTER(factOutput, factOutput[IDORIUNDOREJEITE] = 1))


Soma Tempo Gasto :=
	SUM([Tempo Gasto])


Média Tempo Gasto Status :=
	   CALCULATE(SUM(factTempoMedio[Tempo Gasto]) / [Qtde Itens Tempo Médio])


Tempo Médio Solução :=
	   AVERAGE(factTempoMedio[Tempo Gasto])


Qtde Itens Tempo Médio :=
	   DISTINCTCOUNT(factTempoMedio[IDCHAMADO])


Contagem Distinta de Status Chamado :=
	DISTINCTCOUNT([Status Chamado])


Qtde Backlog Zero :=
	   COUNTROWS(factBacklogZero)


Meses Contabilizados :=
	   CALCULATE(DISTINCTCOUNT(dTempoApuracao[Código Período]);
               FILTER(dTempoApuracao, dTempoApuracao[Código Ano] >= 2017);
               FILTER(dTempoApuracao, dTempoApuracao[Código Ano] < 2026))


Dias Úteis Mês Apuração :=
	CALCULATE(SUM(dTempoApuracao[Binário Flag Dia da Semana]);
             FILTER(dTempoApuracao, dTempoApuracao[Código Ano] >= 2017);
             FILTER(dTempoApuracao, dTempoApuracao[Data Apuração] < TODAY());
             FILTER(dTempoApuracao, dTempoApuracao[Flag Feriado] = "N"))


Semana Atual :=
	WEEKNUM(TODAY())


Próxima Semana :=
	WEEKNUM(today())+1


Horas Úteis Mês :=
	[Dias Úteis Mês] * 8


Dias Úteis Mês :=
	CALCULATE(SUM(dTempoRegistry[Binário Flag Dia da Semana]);
             FILTER(dTempoRegistry, dTempoRegistry[Código Ano] >= 2017);
             FILTER(dTempoRegistry, dTempoRegistry[Data Registry] < TODAY());
             FILTER(dTempoRegistry, dTempoRegistry[Flag Feriado] = "N"))


Média Horas Apontadas no Mês factRegistryPerfilSeguranca :=
	CALCULATE(AVERAGE(factRegistry[Média Horas Apontadas por Registry]), ALL(factRegistry))


Horas Apontadas no Mês factPerfilSeguranca :=
	CALCULATE(SUM(factRegistry[Horas Apontadas]);
             FILTER(dTempoRegistry,  dTempoRegistry[Código Mês] == MONTH(TODAY())), FILTER(dTempoRegistry,  dTempoRegistry[Código Ano] == YEAR(TODAY())))


Soma Minutos factRegistryPerfilSeguranca :=
	SUM([Minutos])


Média Horas Apontadas factRegistryPerfilSeguranca :=
	AVERAGE([Horas Apontadas - Origem])


Soma Horas factRegistryPerfilSeguranca :=
	SUM([Horas Apontadas - Origem])


Média Minutos factRegistryPerfilSeguranca :=
	AVERAGE([Minutos])


Horas Potenciais factRegistryPerfilSeguranca :=
	factRegistry[Distinct Count IDUSUARIO] * [Horas Úteis Mês]


Qtde Chamados Registry factRegistryPerfilSeguranca :=
	DISTINCTCOUNT([IDCHAMADO])


